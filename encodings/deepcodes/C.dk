(;-----------------------------------------------------------------;)
(;----------------------  PUBLIC DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)

(;---------------------------  Ss  -----------------------------;)

S : Type.


(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type _cs ;)
U : s : S -> Type.

(; Type decoding function ;)
def T : s : S -> a : U s -> Type.


(;------------------------  CTS predicates  -----------------------;)

Bool : Type.
eps : Bool -> Type.
true : Bool.
I : eps true.

def Axiom : S -> S -> Bool.
def Rule  : S -> S -> S -> Bool.
def Cumul : S -> S -> Bool.

def sup   : S -> S -> S.


(;--------------------  T public constructors  -----------------;)

def u : s : S -> s' : S ->
           p : eps (Axiom s s') -> U s'.

def prod : s1 : S -> s2 : S -> s3 : S ->
           p : eps (Rule s1 s2 s3) ->
           a : U s1 -> b : (T s1 a -> U s2) -> U s3.

def SubType : s : S -> s' : S -> U s -> U s' -> Bool.

def cast : s : S -> s' : S ->
           a : U s -> b  : U s' ->
           p : eps (SubType s s' a b) ->
           T s a -> T s' b.


(;------------------------  Coqine parameters  --------------------;)

(;
Coqine syntax = Dedukti

Coqine Sort = S
Coqine Univ = U
Coqine Term = T
Coqine sup  = sup
Coqine univ = u
Coqine prod = prod
Coqine cast = cast

Coqine use_cast  = true    Use casts instead of lifts
Coqine pred_univ = true    U is predicative
Coqine pred_prod = true    Prod is predicative
Coqine pred_cast = true    Cast is predicative

Coqine eps   = eps
Coqine Cumul = Cumul

--- Predicate constructors:
Coqine I     = I
;)


(;-----------------------------------------------------------------;)
(;---------------------  PRIVATE DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)


Code : Type.
def _D : Code -> Type.

cU : s : S -> Code.
cPi  : A : Code -> (_D A -> Code) -> Code.

[s]   _D (cU s)    --> U s.
[a,b] _D (cPi a b) --> x : _D a -> _D (b x).


def _u : t : Code -> Code -> _D t.
def _c   : t : Code -> _D t -> Code.

[s,t] T s t --> _D (_c (cU s) t).



(;----------------------------  Axiom  ----------------------------;)

[s,s',p] u s s' p --> _u (cU s') (cU s).


(;----------------------------  Rule  -----------------------------;)

[s1,s2,s3,p,a,b]
  prod s1 s2 s3 p a b
  -->
  _u (cU s3)
    (cPi (_c (cU s1) a)
         (x : _D (_c (cU s1) a) => _c (cU s2) (b x))).


(;---------------------------  Casts  -----------------------------;)

[s1,s2,a,b,t]
  cast s1 s2 a b _ t
  -->
  _u (_c (cU s2) b) (_c (_c (cU s1) a) t).



(;-------------------------  Subtyping ----------------------------;)

[s] Cumul s s --> true.

def forall : c : Code -> (_D c -> Bool) -> Bool.
[B] forall _ (x => B) --> B.

def ST : Code -> Code -> Bool.
[s1, s2] ST (cU s1)   (cU s2)    --> Cumul s1 s2
[a,b,b'] ST (cPi a b) (cPi a b') --> forall a (x : _D a => ST (b x) (b' x)).
[A]      ST A         A          --> true.

[sa,sb,a,b] SubType sa sb a b --> ST (_c (cU sa) a) (_c (cU sb) b).



(;---------------------  Canonicity rules -------------------------;)

[s,t] _u s (_c s t) --> t.
[  t] _c _ (_u _ t) --> t.

[A,B,C,F]
  _u (cPi A (x => B x)) (_c (cPi A (x => C x)) (x => F x))
  -->
  x : _D A => _u (B x) (_c (C x) (F x)).

[A,B,C,F,G]
  _u (cPi A (x => B x)) (_c (cPi A (x => C x)) F) G
  -->
  _u (B G) (_c (C G) (F G)).


(;------------------------  Coqine parameters  --------------------;)

(;
Normal forms of lifted types are _ud _cs:
Coqine lifted_type_pattern = recoded

Coqine _code      = _c
Coqine _uncode    = _u
Coqine _code_univ = cU
Coqine _code_prod = cPi
;)


(;-----------------------------------------------------------------;)
(;-------------------------  Coq encoding  ------------------------;)
(;-----------------------------------------------------------------;)

(;-------------------------  Nat definition  ----------------------;)

Nat : Type.
z : Nat.
s : Nat -> Nat.


(;----------------------  CTS Ss definition  -------------------;)

prop : S.
type : Nat -> S.

def set   : S := type z.
def type0 : S := type (s z).

def max : Nat -> Nat -> Nat.
[i  ] max i     z     --> i
[  j] max z     j     --> j
[i,j] max (s i) (s j) --> s (max i j).

(;
Coqine prop  = prop
Coqine type  = type
Coqine set   = set
Coqine type0 = type0

Coqine Lvl    = Nat (; Uerse polymorphism quantification space ;)
Coqine lvl0   = z   (; Nat representation of lowest level (Set) ;)
Coqine lvlS   = s   (; Nat representation of Type@{i+1} ;)
Coqine lvlMax = max (; Nat representation of Type@{max(i,j)} ;)
;)


(;----------------  Non linear equality predicate  ----------------;)

def Eq : Nat -> Nat -> Bool.
[i] Eq i i --> true.

(;---------------------  CTS Axiom definition  --------------------;)

[  j] Axiom prop     (type j) --> true
[i,j] Axiom (type i) (type j) --> Eq (s i) j.


(;-----------------------  CTS Rule definition  -------------------;)

[     ] Rule _        prop     prop     --> true
[i    ] Rule prop     i        i        --> true
[i,j,k] Rule (type i) (type j) (type k) --> Eq (max i j) k.


(;-------------------  CTS Cumulativity definition  ---------------;)

[   ] Cumul prop     prop     --> true
[i  ] Cumul prop     (type i) --> true
[i,j] Cumul (type i) (type j) --> Eq (max i j) j.


(;-----------------------------  Level LUB  -----------------------;)

[s  ] sup prop     s        --> s
[s  ] sup s        prop     --> s
[i,j] sup (type i) (type j) --> type (max i j).


(;------------------------  Other definitions  -------------------;)

(; These functions are provided to simplify the translation.
   - Axiom s (axiom s)       should reduce to true
   - Rule s1 s2 (rule s1 s2) should reduce to true
;)


def axiom : S -> S.
[]  axiom prop     --> type z
[i] axiom (type i) --> type (s i).
(;  Coqine axiom = axiom  ;)

[x] Axiom x (axiom x) --> true.


def rule : S -> S -> S.
[s  ] rule prop     s        --> s
[   ] rule _        prop     --> prop
[i,j] rule (type i) (type j) --> type (max i j).
(;  Coqine rule = rule  ;)

[s1,s2] Rule s1 s2 (rule s1 s2) --> true.
(; Coqine readable = true ;)
