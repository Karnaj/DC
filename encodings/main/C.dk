(;-----------------------------------------------------------------;)
(;----------------------  PUBLIC DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)

(;---------------------------  Ss  -----------------------------;)

S : Type.

def sup : S -> S -> S.


(;---------------------  Types and terms  -------------------------;)

(; Type for encoded type _cs ;)
U : s : S -> Type.

(; Type decoding function ;)
def T : s : S -> a : U s -> Type.


(;------------------------  CTS predicates  -----------------------;)

Bool : Type.
eps : Bool -> Type.
true : Bool.
I : eps true.

def Axiom : S -> S -> Bool.
def Rule  : S -> S -> S -> Bool.

def Cumul : S -> S -> Bool.
def Eq : S -> S -> Bool.
[x] Eq x x --> true.
(;
Note:
  A -> B  subtype of  C -> D
iif
  and (Eq A C) (Cumul B D)
;)

defac and [Bool].
[c] and true c --> c.



(;-------------------  CTS predicates constructors  ---------------;)
def BoolO : Type.
BoolNone : BoolO.
BoolSome : Bool -> BoolO.

def Multi : Bool -> BoolO -> Type.
[A  ] Multi A  BoolNone    -->  eps A
[A,B] Multi A (BoolSome B) -->  eps B -> C : BoolO -> Multi (and A B) C.

pair : A : BoolO -> Multi true A.
(; An inhabitant of the conjunction of three satisfied constraints
     c1 : A
     c2 : B
     c3 : C
   is encoded as:
     pair (Some A) c1 (Some B) c2 (Some C) c3 None : eps (and {A,B,C})
;)


def SO : Type.
SNone : SO.
SSome : S -> SO.

def Trans : S -> S -> SO -> Type.
[s1,s2   ] Trans s1 s2 SNone      -->  eps (Cumul s1 s2)
[s1,s2,s3] Trans s1 s2 (SSome s3) -->  eps (Cumul s2 s3) -> so : SO -> Trans s1 s3 so.

trans : s : S -> so : SO -> Trans s s so.
(; Assume three satisfied and transitively compatible constraints
     c1 : s0 < s1
     c2 : s1 < s2
     c3 : s2 < s3
   then s0 < s3 can be inhabited with:
     trans s1 (Some s1) c1 (Some s2) c2 (Some s3) c3 None : eps (Cumul s0 s3)
;)



cumul_eq : s1 : S -> s2 : S -> eps (Eq s1 s2) -> eps (Cumul s1 s2).

eq_sym   : s1 : S -> s2 : S -> eps (Eq s1 s2) -> eps (Eq s2 s1).



(;--------------------  T public constructors  -----------------;)

def u : s : S -> s' : S ->
           eps (Axiom s s') -> U s'.

def prod : s1 : S -> s2 : S -> s3 : S ->
           eps (Rule s1 s2 s3) ->
           a : U s1 -> b : (T s1 a -> U s2) -> U s3.

def SubType : s : S -> s' : S -> U s -> U s' -> Bool.

def cast : s : S -> s' : S ->
           a : U s -> b  : U s' ->
           eps (SubType s s' a b) ->
           T s a -> T s' b.


(;------------------------  Coqine parameters  --------------------;)

(;
Coqine syntax = Dedukti

Coqine Sort = S
Coqine Univ = U
Coqine Term = T
Coqine sup  = sup
Coqine univ = u
Coqine prod = prod
Coqine cast = cast

Coqine use_cast  = true    Use casts instead of lifts
Coqine pred_univ = true    U is predicative
Coqine pred_prod = true    Prod is predicative
Coqine pred_cast = true    Cast is predicative

Coqine pred_prod = true    Prod is predicative

Coqine eps   = eps
Coqine Cumul = Cumul
Coqine Eq    = Eq

--- Predicate constructors:
Coqine I     = I

Coqine pair  = pair
Coqine BoolNone  = BoolNone
Coqine BoolSome  = BoolSome

Coqine SortNone  = SNone
Coqine SortSome  = SSome
Coqine trans = trans

Coqine cumul_eq    = cumul_eq
Coqine eq_sym      = eq_sym
;)


(;-----------------------------------------------------------------;)
(;---------------------  PRIVATE DEFINITIONS  ---------------------;)
(;-----------------------------------------------------------------;)

(; Codes are (more or less) a special "unsafe" uerse
   containing all typable terms ;)
sinf : S.
def Code := U sinf.

def _D : Code -> Type.
def _u : t : Code -> Code -> _D t.
def _c : t : Code -> _D t -> Code.

cU : s : S -> Code.
cPi  : A : Code -> (_D A -> Code) -> Code.
cLam : A : Code -> (_D A -> Code) -> Code.
def cApp : Code -> Code -> Code.

[s]   _D (cU s)    --> U s.
[a,b] _D (cPi a b) --> x : _D a -> _D (b x).

[t]   _c (cU sinf) t --> t.
[t] _u (cU sinf) t --> t.

(;----------------------------  T  -----------------------------;)

[s,t] T s t --> _D (_c (cU s) t).


(;----------------------------  Axiom  ----------------------------;)

[s,s',p] u s s' p --> _u (cU s') (cU s).


(;----------------------------  Rule  -----------------------------;)

[s1,s2,s3,p,a,b]
  prod s1 s2 s3 p a b -->
  _u (cU s3) (cPi (_c (cU s1) a) (x => _c (cU s2) (b x))).


(;---------------------------  Casts  -----------------------------;)

[s1,s2,a,b,t] cast s1 s2 a b _ t --> _u (_c (cU s2) b) (_c (_c (cU s1) a) t).



(;-------------------------  Subtyping ----------------------------;)

[s] Cumul s s --> true.

def forall : (Code -> Bool) -> Bool.
[B] forall (x => B) --> B.

def ST : Code -> Code -> Bool.
def EQ : Code -> Code -> Bool.

[s1, s2] ST (cU s1) (cU s2) --> Cumul s1 s2.
[s1, s2] EQ (cU s1) (cU s2) --> Eq s1 s2.

[a,a',b,b']
  ST (cPi a b) (cPi a' b')
  -->
  and (EQ a a') (forall (x:Code => ST (b (_u a x)) (b' (_u a' x)))).

[a,a',b,b']
  EQ (cPi a b) (cPi a' b')
  -->
  and (EQ a a') (forall (x:Code => EQ (b (_u a x)) (b' (_u a' x)))).

[A] EQ A A --> true.
[A] ST A A --> true.

[sa,sb,a,b] SubType sa sb a b --> ST (_c (cU sa) a) (_c (cU sb) b).



(;---------------------  Canonicity rules -------------------------;)

[  t] _c _ (_u _ t) --> t.

[A,B,F]
  _c (cPi A B) F -->
  cLam A (x => _c (B x) (F x)).

[A,B,F,U]
  _u (cPi A B) F U -->
  _u (B U) (cApp F (_c A U)).

[A,A',B,F]
  _u (cPi A B) (cLam A' F)
  -->
  x => _u (B x) (F (_u A' (_c A x))).

[A,B,F,U]
  cApp (_c (cPi A B) F) U -->
  _c (B (_u A U)) (F (_u A U)).

[A,F,U]
  cApp (cLam A F) U --> F (_u A U).

[s,t] _u s (_c s t) --> t.



(;--------------------  Extra private definitions  ----------------;)

def u' (s:S) (s':S) := _u (cU s') (cU s).

def lift' (s:S) (s':S) (t:U s) := _u (cU s') (_c (cU s) t).

def prod' (s1:S) (s2:S) (s:S) (A:U s1) (B:(T s1 A -> U s2)) : U s :=
  _u
    (cU s)
    (cPi
      (_c (cU s1) A)
      (x => _c (cU s2) (B x))).



(;------------------------  Coqine parameters  --------------------;)

(;
Normal forms of lifted types are _ud _cs:
Coqine lifted_type_pattern = recoded

Coqine _code      = _c
Coqine _uncode    = _u
Coqine _code_univ = cU
Coqine _code_prod = cPi
Coqine _code_app  = cApp
Coqine _code_abs  = cLam
Coqine _code_sinf = sinf
;)



(;-----------------------------------------------------------------;)
(;-------------------------  Coq encoding  ------------------------;)
(;-----------------------------------------------------------------;)

(;-------------------------  Nat definition  ----------------------;)

Nat : Type.     (; Type of predicative Type levels ;)
def s : Nat -> Nat.
z : Nat.
(; Set is the smallest (predicative) Type. ;)
(; Careful:  Coq's   Type@{0} = Type@{Set+1}   is    type (s z)  ;)



(;----------------------  CTS Ss definition  -------------------;)

prop : S.
type : Nat -> S.

def set   : S := type z.
def type0 : S := type (s z).

(;
Coqine prop  = prop
Coqine type  = type
Coqine set   = set
Coqine type0 = type0

Coqine Lvl    = Nat (; Uerse polymorphism quantification space ;)
Coqine lvl0   = z   (; Nat representation of lowest level (Set)   ;)
Coqine lvlS   = s   (; Nat representation of Type@{i+1}           ;)
Coqine lvlMax = max (; Nat representation of Type@{max(i,j)} ;)
;)



(;-----------------------  LUB wrt Cumulativity  ------------------;)

defac max [Nat].
[i  ] max i z --> i.

[i,j] s (max i j) --> max (s i) (s j).

[i  ] max i i --> i
[i,j] max i (max i j) --> max i j

[i    ] max i (s i) --> s i
[i,j  ] max i (max (s i) j) --> max (s i) j
[i,j  ] max i (s (max i j)) --> s (max i j)
[i,j,k] max (max i k) (s (max i j)) --> max k (s (max i j)).


[s  ] sup prop     s        --> s
[s  ] sup s        prop     --> s
[i,j] sup (type i) (type j) --> type (max i j).


def Leq : Nat -> Nat -> Bool.
[  j  ] Leq z      j         --> true
[i,j  ] Leq (s i)     (s j)     --> Leq i j
[i,j,k] Leq (max i j) k         --> and (Leq i k) (Leq j k)
[i    ] Leq i         i         --> true
[i    ] Leq i         (s i)     --> true
[i,j  ] Leq i         (max i j) --> true
[i,j  ] Leq i         (max (s i) j) --> true.

(;---------------------  CTS Axiom definition  --------------------;)

[   ] Axiom prop     (type _) --> true
[i,j] Axiom (type i) (type j) --> Leq i j.


(;-----------------------  CTS Rule definition  -------------------;)

[     ] Rule _        prop      prop    --> true
[i    ] Rule prop     (type i) (type i) --> true
[i,j,k] Rule (type i) (type j) (type k) --> Leq (max i j) k.


(;-------------------  CTS Cumulativity definition  ---------------;)

[   ] Cumul prop     prop     --> true
[i  ] Cumul prop     (type i) --> true
[i,j] Cumul (type i) (type j) --> Leq i j.



(;------------------------  Other definitions  -------------------;)

(; These functions are provided to simplify the translation.
   - Axiom s (axiom s)       should reduce to true
   - Rule s1 s2 (rule s1 s2) should reduce to true
;)


def axiom : S -> S.
[]  axiom prop     --> type z
[i] axiom (type i) --> type (s i).
(; Coqine axiom = axiom ;)

[x] Axiom x (axiom x) --> true.

def rule : S -> S -> S.
[s  ] rule prop     s        --> s
[   ] rule _        prop     --> prop
[i,j] rule (type i) (type j) --> type (max i j).
(; Coqine rule = rule ;)

[s1,s2] Rule s1 s2 (rule s1 s2) --> true.



(;-----------------------------------------------------------------;)
(;-----------------  FIXPOINTS DEFINITION SCHEME  -----------------;)
(;-----------------------------------------------------------------;)
(; Coqine inlined_fixpoint = true ;)

(; Required rule ;)
[s] Rule s s s --> true.

(; Natural numbers ;)
N : Type.
0 : N.
_S : N -> N.

(; Short names ;)
def 1 := _S 0.
def 2 := _S 1.
def 3 := _S 2.
def 4 := _S 3.
def 5 := _S 4.
def 6 := _S 5.
def 7 := _S 6.
def 8 := _S 7.
def 9 := _S 8.


(;-----------------------------------------------------------------;)
(;--------------------------  SingleArity  ------------------------;)
(;-----------------------------------------------------------------;)

(; [SAcons k s A]   builds a pair of
   - the arity of a single body in a mutually recursive block
     (without the recursive call parameters)
   - the index of expected structurally decreasing inductive argument in arity
   We write these pairs (k / A).
;)
SingleArity : Type.
SAcons : N -> Code -> SingleArity.

(;-----------------  Fetch type from SingleArity  -----------------;)

(;  Fetches _c A  from  (k / A)  ;)
def SA_code : SingleArity -> Code.
[A] SA_code (SAcons _ A) --> A.


(;-----------------------------------------------------------------;)
(;--------------------------  MutualArity  ------------------------;)
(;-----------------------------------------------------------------;)

(; [MutualArity s n]  is the type of lists of s-SA of size n
   We write these lists:   { k1 / A1, ..., kn / An }
;)
MutualArity : N -> Type.

(; Builds {} ;)
MAnil  : MutualArity 0.

(; Builds { k1 / A1, ..., kn+1 / An+1 }
   from
     kn+1
     An+1
     { k1 / A1, ..., kn / An }
;)
MAcons : n : N -> SingleArity -> MutualArity n -> MutualArity (_S n).

(;-----------------  Fetch Arity from Arity List  -----------------;)

(;  Fetches  (ki / Ai)  from  { k1 / A1, ..., kn / An }  ;)
def MA_ith_SA  : n : N -> MutualArity n -> N -> SingleArity.
[SA]     MA_ith_SA _ (MAcons _ SA _) 0     --> SA.
[n,i,MA] MA_ith_SA _ (MAcons n _ MA) (_S i) --> MA_ith_SA n MA i.

(;-----------------  Fetch type _c from Arity List  ------------------;)

(;  Fetches  Ai  from  { k1 / A1, ..., kn / An }  ;)
def MA_ith_code (n : N) (MA : MutualArity n) (i : N) : Code :=
  SA_code (MA_ith_SA n MA i).

(;------  Fetch type with recursive call arguments from Arity List  -----;)

(;  Builds the _c type
      A1 -> ... -> An -> B
    from  _c B  and  { k1 / A1, ..., kn / An }  ;)
def MA_lift_code :
  Code -> m : N -> MutualArity m -> Code.

[B] MA_lift_code B _ MAnil --> B.

[B,m,SA,MA]
  MA_lift_code B _ (MAcons m SA MA)
  -->
  cPi (SA_code SA) (f => MA_lift_code B m MA).

(;  Builds the _c type
      A1 -> ... -> An -> Ai
    from  i  and  { k1 / A1, ..., kn / An }  ;)
def MA_code (n : N) (MA : MutualArity n) (i : N) : Code
  := MA_lift_code (MA_ith_code n MA i) n MA.



(;-----------------------------------------------------------------;)
(;------------------------  MutualFixpoint  -----------------------;)
(;-----------------------------------------------------------------;)

MutualFixpointAux :
  (n : N) -> MutualArity n ->
  (i : N) -> MutualArity i -> Type.

def MutualFixpoint (n : N) (MA : MutualArity n) : Type
  :=
  MutualFixpointAux n MA n MA.

(; MutualFixpoint n { k1 / A1, ..., kn / An }
   is a list of size n whose i-th element is the body of the the i-th fixpoint body:
     A1 -> ... -> An -> Ai
   We write these lists
     { k1 / A1 := body1, ..., kn / An := bodyn }

   MutualFixpointAux n { k1 / A1, ..., kn / An } i { k(n-i+1) / B(n-i+1), ..., kn / Bn }
   is a list of size i whose j-th element has type:
     A1 -> ... -> An -> B(n-i+j)
   When A = B, this is something like
     { k1 / A1 := f1, ..., k1 / A1 := fn }[n-i+1 ... n]
   ! This is different from   { k(n-i+1) / A(n-i+1) := f(n-i+1), ..., kn / An := fn }

   We provide constructors only for MutualFixpointAux.

   It is clear, from their types that
     MutualFixpoint n MA == MutualFixpointAux n MA n MA
;)

MFTnil :
  (n : N) -> (MA : MutualArity n) ->
  MutualFixpointAux n MA 0 MAnil.

MFTcons :
  (n : N) -> (MAn : MutualArity n) ->
  (i : N) -> (MAi : MutualArity i) ->
  SA : SingleArity ->
  _D (MA_lift_code (SA_code SA) n MAn) ->
  MutualFixpointAux n MAn i MAi ->
  MutualFixpointAux n MAn (_S i) (MAcons i SA MAi).



(;-----------------------------------------------------------------;)
(;--------------  Fetch body from MutualFixpoint  -----------------;)
(;-----------------------------------------------------------------;)

(; Fetches  fi  from  i  and  { k1 / A1 := body1, ..., kn / An := bodyn }  ;)
def fix_body :
  n : N ->
  MA: MutualArity n ->
  MutualFixpoint n MA ->
  i : N ->
  _D (MA_code n MA i).

(; Fetches  f(i+j)  from  i, j  and both
   { k1       / A1       := body1      , ..., kn / An := bodyn }
   and
   { k(n-i+1) / A(n-i+1) := body(n-i+1), ..., kn / An := bodyn }
;)
def fix_body' :
  n : N -> MAn : MutualArity n ->
  i : N -> MAi : MutualArity i ->
  MutualFixpointAux n MAn i MAi ->
  j : N ->
  _D (MA_lift_code (SA_code (MA_ith_SA i MAi j)) n MAn).
[n,MA,MF,i] fix_body n MA MF i --> fix_body' n MA n MA MF i.

[n,MA,SA,t]
  fix_body' n MA (_S _) (MAcons _ SA _) (MFTcons _ _ _ _ _ t _  ) 0
  -->
  t.

[n,MA,i,MAi,MFT,j]
  fix_body' n MA (_S _) (MAcons i _ MAi) (MFTcons _ _ _ _ _ _ MFT) (_S j)
  -->
  fix_body' n MA i MAi MFT j.



(;-----------------------------------------------------------------;)
(;---------------------------  Utils  -----------------------------;)
(;-----------------------------------------------------------------;)

(; Input:
     { k1 / A1, ..., kn / An }
     body : A1 -> ... -> An -> x : A -> B x
     a : A
   Output:
     g1 => ... => gn => body a
   of type
     A1 -> ... -> An -> B a
;)
def app_body :
  n : N -> MA : MutualArity n ->
  A : Code ->
  B : (_D A -> Code) ->
  body : _D (MA_lift_code (cPi A B) n MA) ->
  a : _D A ->
  _D (MA_lift_code (B a) n MA).

[body,a]
  app_body _ MAnil _ _ body a --> body a.

[n,SA,MA,A,B,body,a]
  app_body _ (MAcons n SA MA) A B body a
  -->
  f => app_body n MA A B (body f) a.

(; guarded? s A x --> guarded   iif x starts with a constructor   ;)
Guarded? : Type.
guarded : Guarded?.
def _c_guarded? : Ind : Code -> _D Ind -> Guarded?.
def guarded? : s : S -> Ind : U s -> T s Ind -> Guarded?.
[s,Ind,c] guarded? s Ind c --> _c_guarded? (_c (cU s) Ind) c.

(;-----------------------------------------------------------------;)
(;-------------------  Fixpoint projections  ----------------------;)
(;-----------------------------------------------------------------;)

(; This returns the i-th fixpoint projection of the given
    { k1 / A1 := body1, ..., kn / An := bodyn }
   We write this
     Fix fi{ f1 / k1 : A1 := body1, ..., fn / kn : An := bodyn }
   of type Ai
;)
def fix_proj :
  n : N -> MA: MutualArity n ->
  MutualFixpoint n MA ->
  i : N ->
  _D (MA_ith_code n MA i).

(; Returns a term
     Fix1 fi { f1 / k1 : A1 := body1, ..., fn / kn : An := bodyn } (k / A) body
   Such that when applied to  t1, ..., tk with tk constructor headed, it reduces to
     body
       Fix f1{ f1 / k1 : A1 := body1, ..., fn / kn : An := bodyn }
       ...
       Fix fn{ f1 / k1 : A1 := body1, ..., fn / kn : An := bodyn }
       t1
       ...
       tk
;)
def fix_proj_1 :
  n : N -> MA : MutualArity n ->
  MutualFixpoint n MA ->
  SA : SingleArity ->
  _D (MA_lift_code (SA_code SA) n MA) ->
  _D (SA_code SA).

[n,MA,MF,i]
  fix_proj n MA MF i
  -->
  fix_proj_1 n MA MF (MA_ith_SA n MA i) (fix_body n MA MF i).

[n,MA,MF,i,A,B,body,a]
  fix_proj_1 n MA MF
    (SAcons (_S i) (cPi A B))
    body a
  -->
  fix_proj_1 n MA MF
    (SAcons i (B a))
    (app_body n MA A B body a).

(; Returns a term
     Fix2 fi { f1 / k1 : A1 := body1, ..., fn / kn : An := bodyn } A body
   Such that when applied to "guarded", it reduces to
     body
       Fix f1{ f1 / k1 : A1 := body1, ..., fn / kn : An := bodyn }
       ...
       Fix fn{ f1 / k1 : A1 := body1, ..., fn / kn : An := bodyn }
;)
def fix_proj_2 :
  n : N -> MA : MutualArity n ->
  MutualFixpoint n MA ->
  A : Code ->
  _D (MA_lift_code A n MA) ->
  Guarded? ->
  _D A.

[n,MA,MF,Ind,B,body,a]
  fix_proj_1 n MA MF
    (SAcons 0 (cPi Ind B))
    body a
  -->
  fix_proj_2 n MA MF
    (cPi Ind B)
    body (_c_guarded? Ind a) a.

(; Returns a term
     Fix3 A { k1 / A1, ..., kn / An }
       f : (k -> Ak -> ... -> An -> A)
       body
   That reduces to   body (f 1) ... (f n) : A
;)
def fix_proj_3 :
  A : Code ->
  i : N -> MAi : MutualArity i ->
  f : (k : N -> _D (MA_ith_code i MAi k)) ->
  _D (MA_lift_code A i MAi) ->
  _D A.

[n,MA,MF,A,body]
  fix_proj_2 n MA MF A body guarded
  -->
  fix_proj_3 A n MA (k => fix_proj n MA MF k) body.

[body] fix_proj_3 _ _ MAnil _ body --> body.

[i,MAi,A,f,body]
  fix_proj_3 A
    _ (MAcons i _ MAi)
    f
    body
  -->
  fix_proj_3 A
    i MAi
    (k => f (_S k))
    (body (f 0)).



(;-----------------------------------------------------------------;)
(;-------------  Short constructor of MutualArity  ----------------;)
(;-----------------------------------------------------------------;)

(;  MA' s n i  =  SA -> ... (i) ... -> SA -> MA n ;)
def MutualArity' : N -> N -> Type.
[n  ] MutualArity' n 0      --> MutualArity n.
[n,i] MutualArity' n (_S i) --> SingleArity -> MutualArity' n i.

def MA_magic :
  n : N -> m : N ->
  SingleArity ->
  MutualArity' n      m -> (;  SA -> ...(m)... -> SA -> MA n      ;)
  MutualArity' (_S n) m.   (;  SA -> ...(m)... -> SA -> MA (n+1)  ;)

(; Dark magic occuring here ;)
[n  ,A,MA   ] MA_magic n 0     A MA     --> MAcons n A MA.
[n,m,A,MA,A'] MA_magic n (_S m) A MA A' --> MA_magic n m A (MA A').

def make_MA : n : N -> MutualArity' n n.
[    ] make_MA 0        --> MAnil.
[n,SA] make_MA (_S n) SA --> MA_magic n n SA (make_MA n).

(; The idea here is quite complexe:
   1) First we start from a function
     make_MA s n n  :  SA -> ...(n)... -> SA -> MA s n
   2) When a first argument "sa" is provided, we integrate it and build a function
     MA_magic s (n-1) (n-1) sa (make_MA s (n-1) (n-1))
   of type
     SA -> ...(n-1)... -> SA -> MA s n
   where only n-1 arguments are now required to build the MA s n :
   - the last argument "make_MA s (n-1) (n-1)" builds MA s (n-1) from n-1 arguments
   - the 4th argument "sa" remembers the first provided argument
   3) When a second argument sa2 is provided,
     3a) MA_magic forward the extra argument to its "(n-1)-builder" function
         MA_magic s (n-1) (n-1) sa (make_MA s (n-1) (n-1)) sa2
         -->
         MA_magic s (n-1) (n-2) sa (make_MA s (n-1) (n-1) sa2)
       The 3rd argument is decreased to account for the fact that
       the new "(n-1)-builder" function require one less argument to build MA s (n-1).
     3b) Then make_MA can process the argument and become
         MA_magic s (n-1) (n-2) sa (make_MA s (n-1) (n-1) sa2)
         -->
         MA_magic s (n-1) (n-2) sa
           (MA_magic s (n-2) (n-2) sa2 (make_MA s (n-2) (n-2)))
   4) When yet an other argument sa3 is provided, it is forwarded from
      MA_magic s (n-1) (n-1)   to   MA_magic s (n-2) (n-2)
      then eventually to    make_MA s (n-2) (n-2)   which build
      MA_magic s (n-3) (n-3) sa3 (make_MA s (n-3))
   5) This keeps on until make_MA s 0 is reached.
      The term now looks something like:
        MA_magic s (n-1) 0 sa
          (MA_magic s (n-2) 0 sa2
            (MA_magic s (n-3) 0 sa3
              (...
                   (MA_magic s 0 0 san (make_MA s 0))...)))
      At this point, no extra argument is expected and MAnil s is produced.
   6) The innermost MA_magic s 0 0 san (MAnil s)  then builds
        MAcons s n san (MAnil s)
   7) The next one keeps on producing a MAcons
        MA_magic s 1 0 sa(n-1)  (MAcons s n san (MAnil s))
        -->
        MA_cons s 1 sa(n-1) (MAcons s n san (MAnil s))
   8) This keeps on until the last one produces the expected list :
        MA_magic s (n-1) 0 sa l
        -->
        MA_cons s (n-1) sa l   :  MA s n
   Note) In practice the "backward" production of MAcons-es occur first
         at the head (MA_magic s (n-1) ...) and eventually produces the
         "0-builder" (MAnil s) from "MA_magic s 0".
         I find it easier to understand when looking at the innermost
         production first. All the productions occur anyway

   To build a s-MA of size 3 you may now use directly:    make_MA s 3 a b c
;)



(;-----------------------------------------------------------------;)
(;------------  Short constructor of MutualFixpoint  --------------;)
(;-----------------------------------------------------------------;)

(; At this point try just to convince yourself the same thing
  is happening here than above... ;)

def MutualFixpoint' :
  (n : N) -> MutualArity n ->
  (i : N) -> MutualArity i ->
  (j : N) -> MutualArity j ->
  Type.

[n,MAn,i,MAi]
  MutualFixpoint' n MAn i MAi _ MAnil
  -->
  MutualFixpointAux n MAn i MAi.

[n,MAn,i,MAi,SA,j,MAj]
  MutualFixpoint' n MAn i MAi _ (MAcons j SA MAj)
  -->
  _D (MA_lift_code (SA_code SA) n MAn) ->
  MutualFixpoint' n MAn i MAi j MAj.

def fix_magic :
  (n : N) -> (MAn : MutualArity n) ->
  (i : N) -> (MAi : MutualArity i) ->
  (j : N) -> (MAj : MutualArity j) ->
  SA : SingleArity ->
  _D (MA_lift_code (SA_code SA) n MAn) ->
  MutualFixpoint' n MAn i      MAi               j MAj ->
  MutualFixpoint' n MAn (_S i) (MAcons i SA MAi) j MAj.

[n,MAn,i,MAi,SA,t,MFT]
  fix_magic n MAn i MAi _ MAnil SA t MFT
  -->
  MFTcons n MAn i MAi SA t MFT.

[n,MAn,i,MAi,j,MAj,SA,t,MFT,t']
  fix_magic n MAn i MAi (_S _) (MAcons j _ MAj) SA t MFT t'
  -->
  fix_magic n MAn i MAi j MAj SA t (MFT t').

def make_fix :
  (n : N) -> (MAn : MutualArity n) ->
  (i : N) -> (MAi : MutualArity i) ->
  MutualFixpoint' n MAn i MAi i MAi.

[n,MAn]
  make_fix n MAn _ MAnil
  -->
  MFTnil n MAn.

[n,MAn,j,MAj,SA,t]
  make_fix n MAn (_S _) (MAcons j SA MAj) t
  -->
  fix_magic n MAn j MAj j MAj SA t (make_fix n MAn j MAj).




(;-----------------------------------------------------------------;)
(;----  Public symbols with convenient types and shorter names  ---;)
(;-----------------------------------------------------------------;)

def SA : N -> s : S -> U s -> SingleArity.
[n,s,t] SA n s t --> SAcons n (_c (cU s) t).

def fix :
  n : N ->
  MA: MutualArity n -> MutualFixpoint' n MA n MA n MA.
[n,MAn] fix n MAn --> make_fix n MAn n MAn.

def fixproj :
  n : N ->
  MA :(MutualArity' n n -> MutualArity n) ->
  (
     MutualFixpoint' n (MA (make_MA n)) n (MA (make_MA n)) n (MA (make_MA n)) ->
     MutualFixpoint n (MA (make_MA n))
  ) ->
  i : N ->
  _D (MA_ith_code n (MA (make_MA n)) i).

[n,MA,MF]
  fixproj n MA MF
  -->
  fix_proj n
    (MA (make_MA n))
    (MF (fix n (MA (make_MA n)))).


(;-----------------------------------------------------------------;)
(;--------------------------  Recap  ------------------------------;)
(;-----------------------------------------------------------------;)
(;

To build a SingleArity   (k / A)
  SA : N -> s : S -> U s -> SingleArity

To build a MutualArity  { k1 / A1, ..., kn / An }
  make_MA : SingleArity -> ... (n) ... -> SingleArity -> MutualArity

To build a MutualFixpoint  { k1 / A1 := body1, ..., kn / An := bodyn }
  fix :
    { k1 / A1, ..., kn / An } : MutualArity ->
    (A1 -> ... -> An -> A1) ->
    ...
    (A1 -> ... -> An -> An) -> MutualFixpoint

To build the i-th MutualFixpoint projection
      Fix fi { f1 / k1 : A1 := body1, ..., fn / kn : An := bodyn } : Ai
  fix_proj :
    { k1 / A1 := body1, ..., kn / An := bodyn } : MutualFixpoint ->
    i : N -> Ai.


And finally, to build all in a one liner:

fixproj :
    n : N ->
    (c => c (k1 / A1)
            ...
            (kn / An)
    ) ->
    (c => c body1
            ...
            bodyn
    ) ->
    i : N

This is well typed, somehow...
;)


(;------------------------  Coqine parameters  --------------------;)

(;
Coqine inlined_fixpoint = true
Coqine fix_arity_sort   = true  (; Fixpoint sort for each arity ;)
Coqine code_guarded     = true  (; Guards are on _c version of constructors ;)

Coqine 0           = 0
Coqine S           = _S
Coqine SA          = SA
Coqine MA          = make_MA
Coqine fix         = fix
Coqine fix_proj    = fix_proj
Coqine fix_oneline = fixproj
Coqine guard       = guarded?
Coqine code_guard  = _c_guarded?
Coqine guarded     = guarded
;)
(; Coqine readable = true ;)
